// Vitest Snapshot v1

exports[`while 1`] = `
"def byteaToBinary(input)
	if /^\\\\x/.test(input)
		return byteaHexFormatToBinary(input)
	return byteaEscapeFormatToBinary(input)
def byteaHexFormatToBinary(input)
	return Buffer.from(input.substr(2), \\"hex\\")
def byteaEscapeFormatToBinary(input)
	let output = \\"\\"
	let i = 0
	while i < input.length
		if input[i] !== \\"\\\\\\\\\\"
			output += input[i]
			++i
		else
			if /[0-7]{3}/.test(input.substr(i + 1, 3))
				output += String.fromCharCode(parseInt(input.substr(i + 1, 3), 8))
				i += 4
			else
				let backslashes = 1
				while i + backslashes < input.length and input[i + backslashes] === \\"\\\\\\\\\\"
					backslashes++
				let k = 0
				while k < Math.floor(backslashes / 2)
					output += \\"\\\\\\\\\\"
					++k
				i += Math.floor(backslashes / 2) * 2
	def a
		const a = await output
		console.log a
	Buffer.from output, \\"binary\\"
"
`;
