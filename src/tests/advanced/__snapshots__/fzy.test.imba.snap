// Vitest Snapshot v1

exports[`empty_array fzy 1 1`] = `
"let SCORE_MIN = -Infinity
let SCORE_MAX = Infinity
let SCORE_GAP_LEADING = -0.005
let SCORE_GAP_TRAILING = -0.005
let SCORE_GAP_INNER = -0.01
let SCORE_MATCH_CONSECUTIVE = 1
let SCORE_MATCH_SLASH = 0.9
let SCORE_MATCH_WORD = 0.8
let SCORE_MATCH_CAPITAL = 0.7
let SCORE_MATCH_DOT = 0.6
def islower(s)
	return s.toLowerCase() === s
def isupper(s)
	return s.toUpperCase() === s
def precompute_bonus(haystack)
	let m = haystack.length
	let match_bonus = new Array(m)
	let last_ch = \\"/\\"
	let i = 0
	while i < m
		let ch = haystack[i]
		if last_ch === \\"/\\"
			match_bonus[i] = SCORE_MATCH_SLASH
		else if last_ch === \\"-\\" or last_ch === \\"_\\" or last_ch === \\" \\"
			match_bonus[i] = SCORE_MATCH_WORD
		else if last_ch === \\".\\"
			match_bonus[i] = SCORE_MATCH_DOT
		else if islower(last_ch) and isupper(ch)
			match_bonus[i] = SCORE_MATCH_CAPITAL
		else
			match_bonus[i] = 0
		last_ch = ch
		i++
	return match_bonus
def compute(needle, haystack, D, M)
	let n = needle.length
	let m = haystack.length
	let lower_needle = needle.toLowerCase()
	let lower_haystack = haystack.toLowerCase()
	let match_bonus = precompute_bonus(haystack, match_bonus)
	let i = 0
	while i < n
		D[i] = new Array(m)
		M[i] = new Array(m)
		let prev_score = SCORE_MIN
		let gap_score = i === n - 1 ? SCORE_GAP_TRAILING : SCORE_GAP_INNER
		let j = 0
		while j < m
			if lower_needle[i] === lower_haystack[j]
				let score2 = SCORE_MIN
				if !i
					score2 = j * SCORE_GAP_LEADING + match_bonus[j]
				else if j
					score2 = Math.max(M[i - 1][j - 1] + match_bonus[j], D[i - 1][j - 1] + SCORE_MATCH_CONSECUTIVE)
				D[i][j] = score2
				M[i][j] = prev_score = Math.max(score2, prev_score + gap_score)
			else
				D[i][j] = SCORE_MIN
				M[i][j] = prev_score = prev_score + gap_score
			j++
		i++
def score(needle, haystack)
	let n = needle.length
	let m = haystack.length
	if !n or !m
		return SCORE_MIN
	if n === m
		return SCORE_MAX
	if m > 1024
		return SCORE_MIN
	let D = new Array(n)
	let M = new Array(n)
	compute needle, haystack, D, M
	return M[n - 1][m - 1]
def positions(needle, haystack)
	let n = needle.length
	let m = haystack.length
	let positions2 = new Array(n)
	if !n or !m
		return positions2
	if n === m
		let i = 0
		while i < n
			positions2[i] = i
			i++
		return positions2
	if m > 1024
		return positions2
	let D = new Array(n)
	let M = new Array(n)
	compute needle, haystack, D, M
	let match_required = false
	let i = n - 1
let j = m - 1
	while i >= 0
		while j >= 0
			if D[i][j] !== SCORE_MIN and match_required or D[i][j] === M[i][j]
				match_required = i and j and M[i][j] === D[i - 1][j - 1] + SCORE_MATCH_CONSECUTIVE
				positions2[i] = j--
				break
			j--
		i--
	return positions2
def hasMatch(needle, haystack)
	needle = needle.toLowerCase()
	haystack = haystack.toLowerCase()
	let l = needle.length
	let i = 0
let j = 0
	while i < l
		j = haystack.indexOf(needle[i], j) + 1
		if j === 0
			return false
		i += 1
	return true
export {
	SCORE_MIN
	SCORE_MAX
	SCORE_GAP_LEADING
	SCORE_GAP_TRAILING
	SCORE_GAP_INNER
	SCORE_MATCH_CONSECUTIVE
	SCORE_MATCH_SLASH
	SCORE_MATCH_WORD
	SCORE_MATCH_CAPITAL
	SCORE_MATCH_DOT
	score
	positions
	hasMatch
}
"
`;
